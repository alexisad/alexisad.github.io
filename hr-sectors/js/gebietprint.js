/* Generated by the Nim Compiler v0.19.2 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI163214 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI151374 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI151370 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI148832 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI149937 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI149953 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI149820 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI149874 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI148824 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI148922 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI148918 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI148917 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI148830 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI148874 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148814 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148804 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI148802 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI148861 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148806 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148864 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148808 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148867 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148810 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148870 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148812 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148820 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI163202 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI163223 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI163227 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3886 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI124 = {size: 0,kind: 36,base: null,node: null,finalizer: null};
var NTI181035 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI176081 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI165074 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI130 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI173030 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI148878 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI148816 = {size: 0,kind: 20,base: null,node: null,finalizer: null};
var NTI148818 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI112 = {size: 0,kind: 35,base: null,node: null,finalizer: null};
var NTI149020 = {size: 0,kind: 16,base: null,node: null,finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3844 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3844 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3844.node = NNI3844;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3842.base = NTI3828;
NTI3844.base = NTI3842;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
NTI3846.base = NTI3842;
NTI149020.base = NTI112;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
NTI3862.base = NTI3828;
NTI148816.base = NTI148878;
var NNI148818 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI148816, name: "nanosecond", sons: null}]};
NTI148818.node = NNI148818;
var NNI173030 = {kind: 2, len: 4, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "app_id", len: 0, typ: NTI140, name: "app_id", sons: null}, 
{kind: 1, offset: "app_code", len: 0, typ: NTI140, name: "app_code", sons: null}, 
{kind: 1, offset: "useHTTPS", len: 0, typ: NTI130, name: "useHTTPS", sons: null}, 
{kind: 1, offset: "useCIT", len: 0, typ: NTI130, name: "useCIT", sons: null}]};
NTI173030.node = NNI173030;
var NNI165074 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI165074.node = NNI165074;
NTI165074.base = NTI3808;
NTI173030.base = NTI165074;
var NNI176081 = {kind: 2, len: 7, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "tileSize", len: 0, typ: NTI104, name: "tileSize", sons: null}, 
{kind: 1, offset: "ppi", len: 0, typ: NTI104, name: "ppi", sons: null}, 
{kind: 1, offset: "lg", len: 0, typ: NTI140, name: "lg", sons: null}, 
{kind: 1, offset: "lg2", len: 0, typ: NTI140, name: "lg2", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI140, name: "style", sons: null}, 
{kind: 1, offset: "pois", len: 0, typ: NTI130, name: "pois", sons: null}, 
{kind: 1, offset: "crossOrigin", len: 0, typ: NTI138, name: "crossOrigin", sons: null}]};
NTI176081.node = NNI176081;
NTI176081.base = NTI165074;
var NNI181035 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "pixelRatio", len: 0, typ: NTI124, name: "pixelRatio", sons: null}, 
{kind: 1, offset: "noWrap", len: 0, typ: NTI130, name: "noWrap", sons: null}]};
NTI181035.node = NNI181035;
NTI181035.base = NTI165074;
var NNI3886 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3886.node = NNI3886;
NTI3886.base = NTI3828;
var NNI163227 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI163227.node = NNI163227;
var NNI163202 = {kind: 2, offset: 0, typ: null, name: null, len: 8, sons: {"0": {kind: 1, offset: 0, typ: NTI163202, name: "lvlAll", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI163202, name: "lvlDebug", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI163202, name: "lvlInfo", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI163202, name: "lvlNotice", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI163202, name: "lvlWarn", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI163202, name: "lvlError", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI163202, name: "lvlFatal", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI163202, name: "lvlNone", len: 0, sons: null}}};
NTI163202.node = NNI163202;
var NNI163223 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "levelThreshold", len: 0, typ: NTI163202, name: "levelThreshold", sons: null}, 
{kind: 1, offset: "fmtStr", len: 0, typ: NTI138, name: "fmtStr", sons: null}]};
NTI163223.node = NNI163223;
NTI163223.base = NTI3808;
NTI163227.base = NTI163223;
NTI148812.base = NTI148870;
NTI148810.base = NTI148867;
NTI148808.base = NTI148864;
NTI148806.base = NTI148861;
var NNI148802 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI148802, name: "January", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI148802, name: "February", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI148802, name: "March", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI148802, name: "April", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI148802, name: "May", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI148802, name: "June", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI148802, name: "July", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI148802, name: "August", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI148802, name: "September", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI148802, name: "October", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI148802, name: "November", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI148802, name: "December", len: 0, sons: null}}};
NTI148802.node = NNI148802;
var NNI148804 = {kind: 2, offset: 0, typ: null, name: null, len: 7, sons: {"0": {kind: 1, offset: 0, typ: NTI148804, name: "Monday", len: 0, sons: null}, 
"1": {kind: 1, offset: 1, typ: NTI148804, name: "Tuesday", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI148804, name: "Wednesday", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI148804, name: "Thursday", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI148804, name: "Friday", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI148804, name: "Saturday", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI148804, name: "Sunday", len: 0, sons: null}}};
NTI148804.node = NNI148804;
NTI148814.base = NTI148874;
var NNI148917 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "zonedTimeFromTimeImpl", len: 0, typ: NTI148918, name: "zonedTimeFromTimeImpl", sons: null}, 
{kind: 1, offset: "zonedTimeFromAdjTimeImpl", len: 0, typ: NTI148922, name: "zonedTimeFromAdjTimeImpl", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI138, name: "name", sons: null}]};
NTI148917.node = NNI148917;
NTI148830.base = NTI148917;
var NNI148820 = {kind: 2, len: 12, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "nanosecond", len: 0, typ: NTI148816, name: "nanosecond", sons: null}, 
{kind: 1, offset: "second", len: 0, typ: NTI148812, name: "second", sons: null}, 
{kind: 1, offset: "minute", len: 0, typ: NTI148810, name: "minute", sons: null}, 
{kind: 1, offset: "hour", len: 0, typ: NTI148808, name: "hour", sons: null}, 
{kind: 1, offset: "monthday", len: 0, typ: NTI148806, name: "monthday", sons: null}, 
{kind: 1, offset: "month", len: 0, typ: NTI148802, name: "month", sons: null}, 
{kind: 1, offset: "year", len: 0, typ: NTI104, name: "year", sons: null}, 
{kind: 1, offset: "weekday", len: 0, typ: NTI148804, name: "weekday", sons: null}, 
{kind: 1, offset: "yearday", len: 0, typ: NTI148814, name: "yearday", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI130, name: "isDst", sons: null}, 
{kind: 1, offset: "timezone", len: 0, typ: NTI148830, name: "timezone", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI104, name: "utcOffset", sons: null}]};
NTI148820.node = NNI148820;
NTI148820.base = NTI3808;
var NNI148824 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "seconds", len: 0, typ: NTI112, name: "seconds", sons: null}, 
{kind: 1, offset: "nanosecond", len: 0, typ: NTI148816, name: "nanosecond", sons: null}]};
NTI148824.node = NNI148824;
var NNI149874 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI148806, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI148802, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI149874.node = NNI149874;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
var NNI149820 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI104, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI149820.node = NNI149820;
NTI149953.base = NTI104;
NTI149937.base = NTI104;
var NNI148832 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "time", len: 0, typ: NTI148818, name: "time", sons: null}, 
{kind: 1, offset: "utcOffset", len: 0, typ: NTI104, name: "utcOffset", sons: null}, 
{kind: 1, offset: "isDst", len: 0, typ: NTI130, name: "isDst", sons: null}]};
NTI148832.node = NNI148832;
NTI163214.base = NTI138;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function divInt(a_16657, b_16658) {
		    if (b_16658 == 0) raiseDivByZero();
    if (b_16658 == -1 && a_16657 == 2147483647) raiseOverflow();
    return Math.trunc(a_16657 / b_16658);
  

	
}
		var unit_weights_149017 = nimCopy(null, [1, 1000, 1000000, 1000000000, 60000000000, 3600000000000, 86400000000000, 604800000000000], NTI149020);

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function modInt(a_16675, b_16676) {
		    if (b_16676 == 0) raiseDivByZero();
    if (b_16676 == -1 && a_16675 == 2147483647) raiseOverflow();
    return Math.trunc(a_16675 % b_16676);
  

	
}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function isObj(obj_17838, subclass_17839) {
	var result_17840 = false;

	BeforeRet: do {
		var x_17841 = obj_17838;
		if ((x_17841 == subclass_17839)) {
		result_17840 = true;
		break BeforeRet;
		}
		
		L1: do {
				L2: while (true) {
				if (!!((x_17841 == subclass_17839))) break L2;
					if ((x_17841 == null)) {
					result_17840 = false;
					break BeforeRet;
					}
					
					x_17841 = x_17841.base;
				}
		} while(false);
		result_17840 = true;
		break BeforeRet;
	} while (false);

	return result_17840;

}

function mnewString(len_16276) {
		    return new Array(len_16276);
  

	
}

function addChar(x_17889, c_17890) {
		x_17889.push(c_17890);

	
}
var ConstSet2 = setConstr([97, 122], [65, 90], [48, 57], 95);
var ConstSet3 = setConstr([65, 90]);
		var days_until_month_leap_149950 = nimCopy(null, [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], NTI149953);
			var days_until_month_149934 = nimCopy(null, [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], NTI149937);
							var level_names_163211 = nimCopy(null, [makeNimstrLit("DEBUG"), makeNimstrLit("DEBUG"), makeNimstrLit("INFO"), makeNimstrLit("NOTICE"), makeNimstrLit("WARN"), makeNimstrLit("ERROR"), makeNimstrLit("FATAL"), makeNimstrLit("NONE")], NTI163214);
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var utc_instance_151832 = [null];
var local_instance_151833 = [null];

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseDivByZero() {
		var e_16095 = null;
		e_16095 = {m_type: NTI3844, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16095.message = nimCopy(null, makeNimstrLit("division by zero"), NTI138);
		e_16095.parent = null;
		raiseException(e_16095, "DivByZeroError");

	
}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function HEX2A_148401(a_148403, b_148404) {
	var result_148405 = 0;

	var F={procname:"times.*",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 139;
		result_148405 = (a_148403 * b_148404);
	framePtr = F.prev;

	return result_148405;

}

function convert_149448(unit_from_149452, unit_to_149454, quantity_149456) {
		var Tmp1;

	var result_149457 = 0;

	var F={procname:"convert.convert",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 326;
		if ((unit_from_149452 < unit_to_149454)) {
		Tmp1 = chckRange(divInt(quantity_149456, divInt(unit_weights_149017[chckIndx(unit_to_149454, 0, unit_weights_149017.length+0-1)-0], unit_weights_149017[chckIndx(unit_from_149452, 0, unit_weights_149017.length+0-1)-0])), -2147483648, 2147483647);
		}
		else {
		Tmp1 = chckRange(HEX2A_148401(divInt(unit_weights_149017[chckIndx(unit_from_149452, 0, unit_weights_149017.length+0-1)-0], unit_weights_149017[chckIndx(unit_to_149454, 0, unit_weights_149017.length+0-1)-0]), quantity_149456), -2147483648, 2147483647);
		}
		
		result_149457 = Tmp1;
	framePtr = F.prev;

	return result_149457;

}

function init_time_149085(unix_149087, nanosecond_149088) {
	var result_151018 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.initTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 699;
		result_151018.seconds = unix_149087;
		F.line = 700;
		result_151018.nanosecond = nanosecond_149088;
	framePtr = F.prev;

	return result_151018;

}

function get_time_151961() {
	var result_151963 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.getTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1055;
		var millis_152001 = new Date().getTime();
		F.line = 1056;
		var seconds_152012 = convert_149448(2, 3, millis_152001);
		F.line = 1057;
		var nanos_152034 = convert_149448(2, 0, modInt(millis_152001, convert_149448(3, 2, 1)));
		F.line = 1059;
		nimCopy(result_151963, init_time_149085(seconds_152012, chckRange(nanos_152034, 0, 999999999)), NTI148818);
	framePtr = F.prev;

	return result_151963;

}
var start_161831 = [get_time_151961()];
var level_163401 = [0];
var handlers_163403 = [null];
var console_166119 = function(){return window.console;}();

function HEX2F_19442(x_19444, y_19445) {
	var result_19446 = 0.0;

	var F={procname:"system./",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3594;
		result_19446 = (x_19444 / y_19445);
	framePtr = F.prev;

	return result_19446;

}

function isPointInPolygon(test_point_177070, polyg_points_177072) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_177073 = false;

	var F={procname:"math.isPointInPolygon",prev:framePtr,filename:"H\\math.nim",line:0};
	framePtr = F;
		F.line = 12;
		result_177073 = false;
		F.line = 13;
		var j_177081 = (polyg_points_177072 != null ? (polyg_points_177072.length-1) : -1);
		L1: do {
			F.line = 14;
			var i_177126 = 0;
			F.line = 14;
			var p_177127 = null;
			F.line = 2318;
			var i_177135 = 0;
			L2: do {
				F.line = 2319;
					L3: while (true) {
					if (!(i_177135 < (polyg_points_177072 != null ? polyg_points_177072.length : 0))) break L3;
						F.line = 2320;
						i_177126 = i_177135;
						F.line = 2320;
						p_177127 = polyg_points_177072[chckIndx(i_177135, 0, polyg_points_177072.length+0-1)-0];
						F.line = 15;
						var l_p_177128 = polyg_points_177072[chckIndx(j_177081, 0, polyg_points_177072.length+0-1)-0];
							if (!(p_177127.y < test_point_177070.y)) Tmp5 = false; else {								Tmp5 = (test_point_177070.y <= l_p_177128.y);							}							if (Tmp5) Tmp4 = true; else {								if (!(l_p_177128.y < test_point_177070.y)) Tmp6 = false; else {									Tmp6 = (test_point_177070.y <= p_177127.y);								}								Tmp4 = Tmp6;							}						if (Tmp4) {
						if (((p_177127.x + (HEX2F_19442(subInt(test_point_177070.y, p_177127.y), subInt(l_p_177128.y, p_177127.y)) * subInt(l_p_177128.x, p_177127.x))) < test_point_177070.x)) {
						F.line = 18;
						result_177073 = !(result_177073);
						}
						
						}
						
						F.line = 19;
						j_177081 = i_177126;
						F.line = 2321;
						i_177135 = addInt(i_177135, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_177073;

}
var Tmp2;
var Tmp3;

function HEX3Aanonymous_184106(r_184109) {
	var F={procname:"gebietprint.:anonymous",prev:framePtr,filename:"gebietprint.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 67;
			var p_184148 = null;
			F.line = 2245;
			var i_184194 = 0;
			L2: do {
				F.line = 2246;
					L3: while (true) {
					if (!(i_184194 < (r_184109 != null ? r_184109.length : 0))) break L3;
						F.line = 2247;
						p_184148 = r_184109[chckIndx(i_184194, 0, r_184109.length+0-1)-0];
						L4: do {
							F.line = 68;
							console_166119.log("cle r: ", "+", function(o){console.log('+++++:: ', o);return o;}(p_184148.getCell("IS_FENCE")), "+");
							if (!((function(o){console.log('+++++:: ', o);return o;}(p_184148.getCell("IS_FENCE")) == "true"))) {
							F.line = 70;
							var c_184163 = function(o){return o;}(p_184148.getCell("WKT"));
							F.line = 71;
							var mrk_184164 = function(position){return new H.map.Marker(position)}(c_184163);
							}
							else {
								F.line = 74;
								var sub_fence_name_184165 = function(o){console.log('+++++:: ', o);return o;}(p_184148.getCell("ZUSATZ"));
								if (!((sub_fence_name_184165 == "63179-1g"))) {
								F.line = 76;
								break L4;
								}
								
								F.line = 77;
								var cextr_184166 = function(o){return o;}(p_184148.getCell("WKT")).getExterior();
								F.line = 78;
								var arr_cextr_184167 = cextr_184166.getLatLngAltArray();
								F.line = 79;
								var pl_184168 = function(ls){return new H.map.Polyline(ls)}(function(opt_latLngAlts){return new H.geo.LineString(opt_latLngAlts);}(arr_cextr_184167));
								pl_184168.setZIndex(99);
								F.line = 81;
								console_166119.log("loaded Polygon:: ", arr_cextr_184167);
							group_184096[0].addObject(pl_184168);
							}
							
						} while(false);
						F.line = 2248;
						i_184194 = addInt(i_184194, 1);
					}
			} while(false);
		} while(false);
		F.line = 83;
		area_bbox_184092[0] = group_184096[0].getBounds();
		map.setViewBounds(area_bbox_184092[0]);
		map.setZoom(16, true);
	framePtr = F.prev;

	
}

function HEX3Aanonymous_184209(e_184211) {
	var F={procname:"gebietprint.:anonymous",prev:framePtr,filename:"gebietprint.nim",line:0};
	framePtr = F;
		F.line = 88;
		console_166119.log("cle err: ", e_184211);
	framePtr = F.prev;

	
}

function HEX3Aanonymous_184239(c_184241) {
	var F={procname:"gebietprint.:anonymous",prev:framePtr,filename:"gebietprint.nim",line:0};
	framePtr = F;
		F.line = 95;
		document.getElementById("print").appendChild(c_184241);
		F.line = 98;
		console_166119.log("dataUrl:: ");
	framePtr = F.prev;

	
}
var app_id = "NRQTf9fPQwBbKMe5uh1O";
var app_code = "1hNS1cEpObup1p1AKfxSyw";
var opts_184069 = {app_id: app_id, app_code: app_code, useHTTPS: true, useCIT: false, m_type: NTI173030};
var pixel_ratio_184070 = window.devicePixelRatio;
var hidpi_184071 = (1.0000000000000000e+000 < pixel_ratio_184070);
if (hidpi_184071) {
Tmp2 = 512;
}
else {
Tmp2 = 256;
}

var layer_opts_184074 = [{tileSize: Tmp2, pois: true, m_type: NTI176081, ppi: 0, lg: null, lg2: null, style: null, crossOrigin: null}];
if (hidpi_184071) {
layer_opts_184074[0].ppi = 320;
}

var platform_184076 = function(o){return new H.service.Platform(o)}(opts_184069);
var def_layers_184077 = platform_184076.createDefaultLayers(layer_opts_184074[0]);
if (hidpi_184071) {
Tmp3 = 2;
}
else {
Tmp3 = 1;
}

var map_opts_184080 = [{pixelRatio: Tmp3, m_type: NTI181035, noWrap: false}];
var map = function(element, baseLayer, opt_options){return new H.Map(element, baseLayer, opt_options)}(document.getElementById("map"), def_layers_184077.normal.map, map_opts_184080[0]);
var area_bbox_184092 = [null];
var map_evts_184093 = function(map){return new H.mapevents.MapEvents(map)}(map);
var behavior = function(mapE){return new H.mapevents.Behavior(mapE)}(map_evts_184093);
var ui_def_184095 = [function(map, mapTypes){return H.ui.UI.createDefault(map, mapTypes);}(map, def_layers_184077)];
map.setZoom(3, true);
var group_184096 = [function(){return new H.map.Group()}()];
map.addObject(group_184096[0]);
var cle_184105 = platform_184076.getCustomLocationService();
var on_res_cle_184208 = HEX3Aanonymous_184106;
var on_err_cle_184237 = HEX3Aanonymous_184209;
var cle_cancle_184238 = cle_184105.searchAll("63179_1", on_res_cle_184208, on_err_cle_184237);
var get_capture_184266 = HEX3Aanonymous_184239;

function captr() {
	var F={procname:"gebietprint.captr",prev:framePtr,filename:"gebietprint.nim",line:0};
	framePtr = F;
		F.line = 101;
		var scr_top_left_184420 = map.geoToScreen(area_bbox_184092[0].getTopLeft());
		F.line = 102;
		var scr_bottom_right_184421 = map.geoToScreen(area_bbox_184092[0].getBottomRight());
		F.line = 103;
		console_166119.log("areaBbox:: ", scr_top_left_184420, scr_bottom_right_184421);
		F.line = 105;
		map.capture(get_capture_184266, [], subInt(scr_top_left_184420.x, 10), subInt(scr_top_left_184420.y, 10), addInt(scr_bottom_right_184421.x, 10), addInt(scr_bottom_right_184421.y, 10));
	framePtr = F.prev;

	
}
console_166119.log("Pixel:: ", pixel_ratio_184070);
console_166119.log("Platform: ", platform_184076);
console_166119.log("uiDef:: ", ui_def_184095[0], ui_def_184095[0].getMap());
console_166119.log("Layers:: ", layer_opts_184074[0], def_layers_184077.normal.map);

function sys_fatal_16979(message_16985) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2913;
		var e_16987 = null;
		F.line = 2914;
		e_16987 = {m_type: NTI3886, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2915;
		e_16987.message = nimCopy(null, message_16985, NTI138);
		F.line = 2916;
		raiseException(e_16987, "NilAccessError");
	framePtr = F.prev;

	
}

function chckNilDisp(p_16976, p_16976_Idx) {
		if ((p_16976_Idx == 0)) {
		sys_fatal_16979(makeNimstrLit("cannot dispatch; dispatcher is nil"));
		}
		

	
}

function nsuToLowerAsciiChar(c_135213) {
	var result_135214 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet3[c_135213] != undefined)) {
		F.line = 259;
		result_135214 = chckRange(addInt(c_135213, 32), 0, 255);
		}
		else {
			F.line = 261;
			result_135214 = c_135213;
		}
		
	framePtr = F.prev;

	return result_135214;

}

function HEX2B_148437(a_148439, b_148440) {
	var result_148441 = 0;

	var F={procname:"times.+",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 143;
		result_148441 = (a_148439 + b_148440);
	framePtr = F.prev;

	return result_148441;

}

function convert_149121(unit_from_149125, unit_to_149127, quantity_149129) {
		var Tmp1;

	var result_149130 = 0;

	var F={procname:"convert.convert",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 326;
		if ((unit_from_149125 < unit_to_149127)) {
		Tmp1 = divInt(quantity_149129, divInt(unit_weights_149017[chckIndx(unit_to_149127, 0, unit_weights_149017.length+0-1)-0], unit_weights_149017[chckIndx(unit_from_149125, 0, unit_weights_149017.length+0-1)-0]));
		}
		else {
		Tmp1 = HEX2A_148401(divInt(unit_weights_149017[chckIndx(unit_from_149125, 0, unit_weights_149017.length+0-1)-0], unit_weights_149017[chckIndx(unit_to_149127, 0, unit_weights_149017.length+0-1)-0]), quantity_149129);
		}
		
		result_149130 = Tmp1;
	framePtr = F.prev;

	return result_149130;

}

function normalize_151074(seconds_151078, nanoseconds_151080) {
	var result_151081 = {seconds: 0, nanosecond: 0};

	var F={procname:"normalize.normalize",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 340;
		result_151081.seconds = HEX2B_148437(seconds_151078, convert_149121(0, 3, nanoseconds_151080));
		F.line = 341;
		var nanosecond_151103 = modInt(nanoseconds_151080, convert_149448(3, 0, 1));
		if ((nanosecond_151103 < 0)) {
		F.line = 343;
		nanosecond_151103 = addInt(nanosecond_151103, convert_149448(3, 0, 1));
		F.line = 344;
		result_151081.seconds = subInt(result_151081.seconds, 1);
		}
		
		F.line = 345;
		result_151081.nanosecond = chckRange(chckRange(nanosecond_151103, -2147483648, 2147483647), 0, 999999999);
	framePtr = F.prev;

	return result_151081;

}

function HEX2D_148473(a_148475, b_148476) {
	var result_148477 = 0;

	var F={procname:"times.-",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 147;
		result_148477 = (a_148475 - b_148476);
	framePtr = F.prev;

	return result_148477;

}

function HEX2D_148491(a_148493, b_148494) {
	var result_148495 = 0;

	var F={procname:"times.-",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 149;
		result_148495 = (a_148493 - b_148494);
	framePtr = F.prev;

	return result_148495;

}

function ntSubTime(a_151161, b_151162) {
	var result_151163 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.-",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 713;
		nimCopy(result_151163, normalize_151074(HEX2D_148473(a_151161.seconds, b_151162.seconds), HEX2D_148491(a_151161.nanosecond, b_151162.nanosecond)), NTI148818);
	framePtr = F.prev;

	return result_151163;

}

function normalize_150211(seconds_150215, nanoseconds_150217) {
	var result_150218 = {seconds: 0, nanosecond: 0};

	var F={procname:"normalize.normalize",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 340;
		result_150218.seconds = HEX2B_148437(seconds_150215, convert_149121(0, 3, nanoseconds_150217));
		F.line = 341;
		var nanosecond_150240 = modInt(nanoseconds_150217, convert_149448(3, 0, 1));
		if ((nanosecond_150240 < 0)) {
		F.line = 343;
		nanosecond_150240 = addInt(nanosecond_150240, convert_149448(3, 0, 1));
		F.line = 344;
		result_150218.seconds = subInt(result_150218.seconds, 1);
		}
		
		F.line = 345;
		result_150218.nanosecond = chckRange(chckRange(nanosecond_150240, -2147483648, 2147483647), 0, 999999999);
	framePtr = F.prev;

	return result_150218;

}

function init_duration_149089(nanoseconds_149091, microseconds_149092, milliseconds_149093, seconds_149094, minutes_149095, hours_149096, days_149097, weeks_149098) {
	var result_150101 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.initDuration",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 542;
		var seconds_150182 = HEX2B_148437(HEX2B_148437(HEX2B_148437(HEX2B_148437(HEX2B_148437(HEX2B_148437(HEX2B_148437(convert_149121(7, 3, weeks_149098), convert_149121(6, 3, days_149097)), convert_149121(4, 3, minutes_149095)), convert_149121(5, 3, hours_149096)), convert_149121(3, 3, seconds_149094)), convert_149121(2, 3, milliseconds_149093)), convert_149121(1, 3, microseconds_149092)), convert_149121(0, 3, nanoseconds_149091));
		F.line = 550;
		var nanoseconds_150206 = chckRange(HEX2B_148437(HEX2B_148437(convert_149121(2, 0, modInt(milliseconds_149093, 1000)), convert_149121(1, 0, modInt(microseconds_149092, 1000000))), modInt(nanoseconds_149091, 1000000000)), -2147483648, 2147483647);
		F.line = 554;
		nimCopy(result_150101, normalize_150211(seconds_150182, nanoseconds_150206), NTI148824);
	framePtr = F.prev;

	return result_150101;

}

function floor_div_149534(x_149538, y_149540) {
			var Tmp1;
			var Tmp2;
				var Tmp3;

	var result_149541 = 0;

		result_149541 = Math.trunc(x_149538 / y_149540);
		var r_149542 = Math.trunc(x_149538 % y_149540);
			if (!(0 < r_149542)) Tmp2 = false; else {				Tmp2 = (y_149540 < 0);			}			if (Tmp2) Tmp1 = true; else {				if (!(r_149542 < 0)) Tmp3 = false; else {					Tmp3 = (0 < y_149540);				}				Tmp1 = Tmp3;			}		if (Tmp1) {
		result_149541 -= 1;
		}
		

	return result_149541;

}

function inc_148536(a_148539, a_148539_Idx, b_148540) {
	var F={procname:"times.inc",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 153;
		a_148539[a_148539_Idx] += b_148540;
	framePtr = F.prev;

	
}

function from_epoch_day_149871(epochday_149873) {
		var Tmp1;
		var Tmp2;

	var result_149878 = {Field0: 0, Field1: 0, Field2: 0};

	var F={procname:"times.fromEpochDay",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 479;
		var z_149879 = [epochday_149873];
		F.line = 480;
		inc_148536(z_149879, 0, 719468);
		F.line = 481;
		if ((0 <= z_149879[0])) {
		Tmp1 = z_149879[0];
		}
		else {
		Tmp1 = HEX2D_148473(z_149879[0], 146096);
		}
		
		var era_149885 = divInt(Tmp1, 146097);
		F.line = 482;
		var doe_149887 = HEX2D_148473(z_149879[0], HEX2A_148401(era_149885, 146097));
		F.line = 483;
		var yoe_149892 = divInt(HEX2D_148473(HEX2B_148437(HEX2D_148473(doe_149887, divInt(doe_149887, 1460)), divInt(doe_149887, 36524)), divInt(doe_149887, 146096)), 365);
		F.line = 484;
		var y_149894 = HEX2B_148437(yoe_149892, HEX2A_148401(era_149885, 400));
		F.line = 485;
		var doy_149898 = HEX2D_148473(doe_149887, HEX2D_148473(HEX2B_148437(HEX2A_148401(365, yoe_149892), divInt(yoe_149892, 4)), divInt(yoe_149892, 100)));
		F.line = 486;
		var mp_149901 = divInt(HEX2B_148437(HEX2A_148401(5, doy_149898), 2), 153);
		F.line = 487;
		var d_149904 = HEX2B_148437(HEX2D_148473(doy_149898, divInt(HEX2B_148437(HEX2A_148401(153, mp_149901), 2), 5)), 1);
		F.line = 488;
		if ((mp_149901 < 10)) {
		Tmp2 = 3;
		}
		else {
		Tmp2 = -9;
		}
		
		var m_149907 = HEX2B_148437(mp_149901, Tmp2);
		F.line = 489;
		nimCopy(result_149878, {Field0: chckRange(d_149904, 1, 31), Field1: chckRange(m_149907, 1, 12), Field2: chckRange(HEX2B_148437(y_149894, ((m_149907 <= 2) ? 1:0)), -2147483648, 2147483647)}, NTI149874);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_149878;

}

function is_leap_year_149601(year_149603) {
		var Tmp1;
			var Tmp2;

	var result_149604 = false;

	var F={procname:"times.isLeapYear",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 441;
		if (!(modInt(year_149603, 4) == 0)) Tmp1 = false; else {			if (!((modInt(year_149603, 100) == 0))) Tmp2 = true; else {				Tmp2 = (modInt(year_149603, 400) == 0);			}			Tmp1 = Tmp2;		}		result_149604 = Tmp1;
	framePtr = F.prev;

	return result_149604;

}

function get_days_in_month_149620(month_149622, year_149623) {
			var Tmp1;

	var result_149624 = 0;

	var F={procname:"times.getDaysInMonth",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 447;
		switch (month_149622) {
		case 2:
			F.line = 448;
			if (is_leap_year_149601(year_149623)) {
			Tmp1 = 29;
			}
			else {
			Tmp1 = 28;
			}
			
			result_149624 = Tmp1;
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			F.line = 449;
			result_149624 = 30;
			break;
		default: 
			F.line = 450;
			result_149624 = 31;
			break;
		}
	framePtr = F.prev;

	return result_149624;

}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 2913;
		var e_20445 = null;
		F.line = 2914;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2915;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2916;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3870;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 3877;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function nsuIntToStr(x_137452, minchars_137453) {
	var result_137454 = null;

		result_137454 = nimCopy(null, cstrToNimstr((Math.abs(x_137452))+""), NTI138);
		L1: do {
			var i_137466 = 0;
			var colontmp__137468 = 0;
			colontmp__137468 = (minchars_137453 - (result_137454 != null ? result_137454.length : 0));
			var res_137471 = 1;
			L2: do {
					L3: while (true) {
					if (!(res_137471 <= colontmp__137468)) break L3;
						i_137466 = res_137471;
						result_137454 = nimCopy(null, [48].concat(result_137454), NTI138);
						res_137471 += 1;
					}
			} while(false);
		} while(false);
		if ((x_137452 < 0)) {
		result_137454 = nimCopy(null, [45].concat(result_137454), NTI138);
		}
		

	return result_137454;

}

function assert_valid_date_149657(monthday_149659, month_149660, year_149661) {
	var F={procname:"times.assertValidDate",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		if (!((monthday_149659 <= get_days_in_month_149620(month_149660, year_149661)))) {
		F.line = 457;
		failed_assert_impl_20481((makeNimstrLit("C:\\Nim\\lib\\pure\\times.nim(457, 10) `monthday <= getDaysInMonth(month, year)` ")).concat(cstrToNimstr((year_149661)+""),makeNimstrLit("-"),nsuIntToStr(month_149660, 2),makeNimstrLit("-"),cstrToNimstr((monthday_149659)+""),makeNimstrLit(" is not a valid date")));
		}
		
	framePtr = F.prev;

	
}

function HEX2A_148419(a_148421, b_148422) {
	var result_148423 = 0;

	var F={procname:"times.*",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 141;
		result_148423 = (a_148421 * b_148422);
	framePtr = F.prev;

	return result_148423;

}

function HEX2B_148455(a_148457, b_148458) {
	var result_148459 = 0;

	var F={procname:"times.+",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 145;
		result_148459 = (a_148457 + b_148458);
	framePtr = F.prev;

	return result_148459;

}

function to_epoch_day_149814(monthday_149816, month_149817, year_149818) {
		var Tmp1;
		var Tmp2;

	var result_149819 = 0;

	var F={procname:"times.toEpochDay",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 463;
		assert_valid_date_149657(monthday_149816, month_149817, year_149818);
		F.line = 465;
		var colontmp__184521 = {Field0: 0, Field1: 0, Field2: 0};
		F.line = 465;
		var y_149827 = 0;
		F.line = 465;
		var m_149828 = 0;
		F.line = 465;
		var d_149829 = 0;
		F.line = 465;
		nimCopy(colontmp__184521, {Field0: year_149818, Field1: month_149817, Field2: monthday_149816}, NTI149820);
		F.line = 465;
		y_149827 = colontmp__184521["Field0"];
		F.line = 465;
		m_149828 = colontmp__184521["Field1"];
		F.line = 465;
		d_149829 = colontmp__184521["Field2"];
		if ((m_149828 <= 2)) {
		F.line = 467;
		y_149827 = subInt(y_149827, 1);
		}
		
		F.line = 469;
		if ((0 <= y_149827)) {
		Tmp1 = y_149827;
		}
		else {
		Tmp1 = HEX2D_148491(y_149827, 399);
		}
		
		var era_149842 = divInt(Tmp1, 400);
		F.line = 470;
		var yoe_149844 = HEX2D_148491(y_149827, HEX2A_148419(era_149842, 400));
		F.line = 471;
		if ((2 < m_149828)) {
		Tmp2 = -3;
		}
		else {
		Tmp2 = 9;
		}
		
		var doy_149851 = HEX2D_148491(HEX2B_148455(divInt(HEX2B_148455(HEX2A_148419(153, HEX2B_148455(m_149828, Tmp2)), 2), 5), d_149829), 1);
		F.line = 472;
		var doe_149854 = HEX2B_148455(HEX2D_148491(HEX2B_148455(HEX2A_148419(yoe_149844, 365), divInt(yoe_149844, 4)), divInt(yoe_149844, 100)), doy_149851);
		F.line = 473;
		result_149819 = HEX2D_148491(HEX2B_148455(HEX2A_148419(era_149842, 146097), doe_149854), 719468);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_149819;

}

function get_day_of_week_149979(monthday_149981, month_149982, year_149983) {
		var Tmp1;

	var result_149984 = 0;

	var F={procname:"times.getDayOfWeek",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 506;
		assert_valid_date_149657(monthday_149981, month_149982, year_149983);
		F.line = 508;
		var days_149985 = HEX2D_148473(to_epoch_day_149814(monthday_149981, month_149982, year_149983), 3);
		F.line = 509;
		var weeks_149994 = floor_div_149534(days_149985, 7);
		F.line = 510;
		var wd_149995 = HEX2D_148473(days_149985, HEX2A_148401(weeks_149994, 7));
		F.line = 513;
		if ((wd_149995 == 0)) {
		Tmp1 = 6;
		}
		else {
		Tmp1 = chckRange(HEX2D_148473(wd_149995, 1), 0, 6);
		}
		
		result_149984 = Tmp1;
	framePtr = F.prev;

	return result_149984;

}

function get_day_of_year_149928(monthday_149930, month_149931, year_149932) {
	var result_149933 = 0;

	var F={procname:"times.getDayOfYear",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 494;
		assert_valid_date_149657(monthday_149930, month_149931, year_149932);
		if (is_leap_year_149601(year_149932)) {
		F.line = 499;
		result_149933 = chckRange(HEX2D_148491(HEX2B_148455(days_until_month_leap_149950[chckIndx(month_149931, 1, days_until_month_leap_149950.length+1-1)-1], monthday_149930), 1), 0, 365);
		}
		else {
			F.line = 501;
			result_149933 = chckRange(HEX2D_148491(HEX2B_148455(days_until_month_149934[chckIndx(month_149931, 1, days_until_month_149934.length+1-1)-1], monthday_149930), 1), 0, 365);
		}
		
	framePtr = F.prev;

	return result_149933;

}

function init_date_time_151330(zt_151332, zone_151333) {
	var result_151334 = {m_type: NTI148820, nanosecond: 0, second: 0, minute: 0, hour: 0, monthday: 0, month: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0};

	var F={procname:"times.initDateTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 762;
		F.line = 763;
		var adj_time_151335 = ntSubTime(zt_151332.time, init_duration_149089(0, 0, 0, zt_151332.utcOffset, 0, 0, 0, 0));
		F.line = 764;
		var s_151336 = adj_time_151335.seconds;
		F.line = 765;
		var epochday_151345 = floor_div_149534(s_151336, 86400);
		F.line = 766;
		var rem_151346 = HEX2D_148473(s_151336, HEX2A_148401(epochday_151345, 86400));
		F.line = 767;
		var hour_151347 = divInt(rem_151346, 3600);
		F.line = 768;
		rem_151346 = HEX2D_148473(rem_151346, HEX2A_148401(hour_151347, 3600));
		F.line = 769;
		var minute_151348 = divInt(rem_151346, 60);
		F.line = 770;
		rem_151346 = HEX2D_148473(rem_151346, HEX2A_148401(minute_151348, 60));
		F.line = 771;
		var second_151349 = rem_151346;
		F.line = 773;
		var colontmp__184520 = {Field0: 0, Field1: 0, Field2: 0};
		F.line = 773;
		var d_151350 = 0;
		F.line = 773;
		var m_151351 = 0;
		F.line = 773;
		var y_151352 = 0;
		F.line = 773;
		nimCopy(colontmp__184520, from_epoch_day_149871(epochday_151345), NTI149874);
		F.line = 773;
		d_151350 = colontmp__184520["Field0"];
		F.line = 773;
		m_151351 = colontmp__184520["Field1"];
		F.line = 773;
		y_151352 = colontmp__184520["Field2"];
		nimCopy(result_151334, {year: y_151352, month: m_151351, monthday: nimCopy(null, d_151350, NTI148806), hour: nimCopy(null, chckRange(hour_151347, 0, 23), NTI148808), minute: nimCopy(null, chckRange(minute_151348, 0, 59), NTI148810), second: nimCopy(null, chckRange(second_151349, 0, 60), NTI148812), nanosecond: nimCopy(null, zt_151332.time.nanosecond, NTI148816), weekday: get_day_of_week_149979(d_151350, m_151351, y_151352), yearday: get_day_of_year_149928(d_151350, m_151351, y_151352), isDst: zt_151332.isDst, timezone: zone_151333, utcOffset: zt_151332.utcOffset, m_type: NTI148820}, NTI148820);
	framePtr = F.prev;

	return result_151334;

}

function zoned_time_from_time_151410(zone_151412, time_151413) {
	var result_151414 = {time: {seconds: 0, nanosecond: 0}, utcOffset: 0, isDst: false};

	var F={procname:"times.zonedTimeFromTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 829;
		nimCopy(result_151414, zone_151412.zonedTimeFromTimeImpl(time_151413), NTI148832);
	framePtr = F.prev;

	return result_151414;

}

function in_zone_151483(time_151485, zone_151486) {
	var result_151487 = {m_type: NTI148820, nanosecond: 0, second: 0, minute: 0, hour: 0, monthday: 0, month: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0};

	var F={procname:"times.inZone",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 853;
		nimCopy(result_151487, init_date_time_151330(zoned_time_from_time_151410(zone_151486, time_151485), zone_151486), NTI148820);
	framePtr = F.prev;

	return result_151487;

}

function new_timezone_151367(name_151369, zoned_time_from_time_impl_151373, zoned_time_from_adj_time_impl_151377) {
	var result_151378 = null;

	var F={procname:"times.newTimezone",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 795;
		result_151378 = {name: nimCopy(null, name_151369, NTI138), zonedTimeFromTimeImpl: nimCopy(null, zoned_time_from_time_impl_151373, NTI151370), zonedTimeFromAdjTimeImpl: nimCopy(null, zoned_time_from_adj_time_impl_151377, NTI151374)};
	framePtr = F.prev;

	return result_151378;

}

function local_zoned_time_from_time_149079(time_149081) {
	var result_151621 = {time: {seconds: 0, nanosecond: 0}, utcOffset: 0, isDst: false};

	var F={procname:"times.localZonedTimeFromTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 895;
		var js_date_151623 = new Date((time_149081.seconds * 1.0000000000000000e+003));
		F.line = 896;
		var offset_151624 = HEX2A_148419(js_date_151623.getTimezoneOffset(), 60);
		F.line = 897;
		nimCopy(result_151621.time, time_149081, NTI148818);
		F.line = 898;
		result_151621.utcOffset = offset_151624;
		F.line = 899;
		result_151621.isDst = false;
	framePtr = F.prev;

	return result_151621;

}

function contains_151670(s_151677, value_151679) {
	var result_151680 = false;

	var F={procname:"contains.contains",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 1272;
		result_151680 = ((s_151677.a <= value_151679) && (value_151679 <= s_151677.b));
	framePtr = F.prev;

	return result_151680;

}

function HEX2EHEX2E_57828(a_57833, b_57835) {
	var result_57837 = {a: 0, b: 0};

	var F={procname:".....",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\system.nim",line:0};
	framePtr = F;
		F.line = 398;
		result_57837.a = a_57833;
		F.line = 399;
		result_57837.b = b_57835;
	framePtr = F.prev;

	return result_57837;

}

function ntAddTime(a_151065, b_151066) {
	var result_151067 = {seconds: 0, nanosecond: 0};

	var F={procname:"times.+",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 707;
		nimCopy(result_151067, normalize_151074(HEX2B_148437(a_151065.seconds, b_151066.seconds), HEX2B_148455(a_151065.nanosecond, b_151066.nanosecond)), NTI148818);
	framePtr = F.prev;

	return result_151067;

}

function local_zoned_time_from_adj_time_149082(adj_time_149084) {
	var result_151642 = {time: {seconds: 0, nanosecond: 0}, utcOffset: 0, isDst: false};

	var F={procname:"times.localZonedTimeFromAdjTime",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 902;
		var utc_date_151644 = new Date((adj_time_149084.seconds * 1.0000000000000000e+003));
		F.line = 903;
		var local_date_151645 = new Date(utc_date_151644.getUTCFullYear(), utc_date_151644.getUTCMonth(), utc_date_151644.getUTCDate(), utc_date_151644.getUTCHours(), utc_date_151644.getUTCMinutes(), utc_date_151644.getUTCSeconds(), 0);
		if (contains_151670(HEX2EHEX2E_57828(0, 99), utc_date_151644.getUTCFullYear())) {
		F.line = 910;
		local_date_151645.setFullYear(utc_date_151644.getUTCFullYear());
		}
		
		F.line = 912;
		result_151642.utcOffset = HEX2A_148419(local_date_151645.getTimezoneOffset(), 60);
		F.line = 913;
		nimCopy(result_151642.time, ntAddTime(adj_time_149084, init_duration_149089(0, 0, 0, result_151642.utcOffset, 0, 0, 0, 0)), NTI148818);
		F.line = 914;
		result_151642.isDst = false;
	framePtr = F.prev;

	return result_151642;

}

function local_151870() {
	var result_151872 = null;

	var F={procname:"times.local",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		if ((local_instance_151833[0] === null)) {
		F.line = 1032;
		local_instance_151833[0] = new_timezone_151367(makeNimstrLit("LOCAL"), local_zoned_time_from_time_149079, local_zoned_time_from_adj_time_149082);
		}
		
		F.line = 1034;
		result_151872 = local_instance_151833[0];
	framePtr = F.prev;

	return result_151872;

}

function local_151944(t_151946) {
	var result_151947 = {m_type: NTI148820, nanosecond: 0, second: 0, minute: 0, hour: 0, monthday: 0, month: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0};

	var F={procname:"times.local",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1049;
		nimCopy(result_151947, in_zone_151483(t_151946, local_151870()), NTI148820);
	framePtr = F.prev;

	return result_151947;

}

function now_152049() {
	var result_152051 = {m_type: NTI148820, nanosecond: 0, second: 0, minute: 0, hour: 0, monthday: 0, month: 0, year: 0, weekday: 0, yearday: 0, isDst: false, timezone: null, utcOffset: 0};

	var F={procname:"times.now",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1075;
		nimCopy(result_152051, local_151944(get_time_151961()), NTI148820);
	framePtr = F.prev;

	return result_152051;

}

function ntgetDateStr() {
	var result_152147 = null;

	var F={procname:"times.getDateStr",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1148;
		var ti_152148 = now_152049();
		F.line = 1150;
		result_152147 = nimCopy(null, (cstrToNimstr((ti_152148.year)+"")).concat([45],nsuIntToStr(ti_152148.month, 2),[45],nsuIntToStr(ti_152148.monthday, 2)), NTI138);
	framePtr = F.prev;

	return result_152147;

}

function ntgetClockStr() {
	var result_152170 = null;

	var F={procname:"times.getClockStr",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\times.nim",line:0};
	framePtr = F;
		F.line = 1154;
		var ti_152171 = now_152049();
		F.line = 1156;
		result_152170 = nimCopy(null, (nsuIntToStr(ti_152171.hour, 2)).concat([58],nsuIntToStr(ti_152171.minute, 2),[58],nsuIntToStr(ti_152171.second, 2)), NTI138);
	framePtr = F.prev;

	return result_152170;

}

function substitute_log_163417(frmt_163419, level_163420, args_163422) {
	var result_163423 = null;

	var F={procname:"logging.substituteLog",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\logging.nim",line:0};
	framePtr = F;
		F.line = 106;
		var msg_len_163425 = 0;
		L1: do {
			F.line = 107;
			var arg_163433 = null;
			F.line = 2245;
			var i_164012 = 0;
			L2: do {
				F.line = 2246;
					L3: while (true) {
					if (!(i_164012 < (args_163422 != null ? args_163422.length : 0))) break L3;
						F.line = 2247;
						arg_163433 = args_163422[chckIndx(i_164012, 0, args_163422.length+0-1)-0];
						F.line = 108;
						msg_len_163425 = addInt(msg_len_163425, (arg_163433 != null ? arg_163433.length : 0));
						F.line = 2248;
						i_164012 = addInt(i_164012, 1);
					}
			} while(false);
		} while(false);
		F.line = 109;
		result_163423 = nimCopy(null, mnewString(0), NTI138);
		F.line = 110;
		var i_163444 = 0;
		L4: do {
			F.line = 111;
				L5: while (true) {
				if (!(i_163444 < (frmt_163419 != null ? frmt_163419.length : 0))) break L5;
					if (!((frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0] == 36))) {
					F.line = 113;
					if (result_163423 != null) { addChar(result_163423, frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0]); } else { result_163423 = [frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0]]; };
					F.line = 114;
					i_163444 = addInt(i_163444, 1);
					}
					else {
						F.line = 116;
						i_163444 = addInt(i_163444, 1);
						F.line = 117;
						var v_163463 = [];
						F.line = 118;
						var app_163601 = [];
						L6: do {
							F.line = 119;
								L7: while (true) {
								if (!(ConstSet2[frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0]] != undefined)) break L7;
									F.line = 120;
									if (v_163463 != null) { addChar(v_163463, nsuToLowerAsciiChar(frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0])); } else { v_163463 = [nsuToLowerAsciiChar(frmt_163419[chckIndx(i_163444, 0, frmt_163419.length+0-1)-0])]; };
									F.line = 121;
									i_163444 = addInt(i_163444, 1);
								}
						} while(false);
						F.line = 122;
						switch (toJSStr(v_163463)) {
						case "date":
							F.line = 123;
							if (result_163423 != null) { result_163423 = (result_163423).concat(ntgetDateStr()); } else { result_163423 = ntgetDateStr().slice(); };
							break;
						case "time":
							F.line = 124;
							if (result_163423 != null) { result_163423 = (result_163423).concat(ntgetClockStr()); } else { result_163423 = ntgetClockStr().slice(); };
							break;
						case "datetime":
							F.line = 125;
							if (result_163423 != null) { result_163423 = (result_163423).concat((ntgetDateStr()).concat(makeNimstrLit("T"),ntgetClockStr())); } else { result_163423 = (ntgetDateStr()).concat(makeNimstrLit("T"),ntgetClockStr()).slice(); };
							break;
						case "app":
							F.line = 126;
							if (result_163423 != null) { result_163423 = (result_163423).concat(app_163601); } else { result_163423 = app_163601.slice(); };
							break;
						case "appdir":
							break;
						case "appname":
							break;
						case "levelid":
							F.line = 131;
							if (result_163423 != null) { addChar(result_163423, level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0][chckIndx(0, 0, level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0].length+0-1)-0]); } else { result_163423 = [level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0][chckIndx(0, 0, level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0].length+0-1)-0]]; };
							break;
						case "levelname":
							F.line = 132;
							if (result_163423 != null) { result_163423 = (result_163423).concat(level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0]); } else { result_163423 = level_names_163211[chckIndx(level_163420, 0, level_names_163211.length+0-1)-0].slice(); };
							break;
						default: 
							break;
						}
					}
					
				}
		} while(false);
		L8: do {
			F.line = 134;
			var arg_164008 = null;
			F.line = 2245;
			var i_164018 = 0;
			L9: do {
				F.line = 2246;
					L10: while (true) {
					if (!(i_164018 < (args_163422 != null ? args_163422.length : 0))) break L10;
						F.line = 2247;
						arg_164008 = args_163422[chckIndx(i_164018, 0, args_163422.length+0-1)-0];
						F.line = 135;
						if (result_163423 != null) { result_163423 = (result_163423).concat(arg_164008); } else { result_163423 = arg_164008.slice(); };
						F.line = 2248;
						i_164018 = addInt(i_164018, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_163423;

}

function log_164054(logger_164056, level_164057, args_164059) {
			var Tmp1;

	var F={procname:"logging.log",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\logging.nim",line:0};
	framePtr = F;
			if (!(level_163401[0] <= level_164057)) Tmp1 = false; else {				Tmp1 = (logger_164056.levelThreshold <= level_164057);			}		if (Tmp1) {
		F.line = 147;
		var ln_164076 = substitute_log_163417(logger_164056.fmtStr, level_164057, args_164059);
		F.line = 149;
		var cln_164201 = toJSStr(ln_164076);
		F.line = 150;
		console.log(cln_164201);
		}
		
	framePtr = F.prev;

	
}

function log_164032(logger_164034, level_164035, args_164037) {
	var F={procname:"logging.log",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\logging.nim",line:0};
	framePtr = F;
	framePtr = F.prev;

	
}

function log_164039(logger_164034, level_164035, args_164037) {
	var F={procname:"logging.log",prev:framePtr,filename:"..\\..\\..\\..\\..\\Nim\\lib\\pure\\logging.nim",line:0};
	framePtr = F;
		F.line = 500;
		chckNilDisp(logger_164034);
		if (isObj(logger_164034.m_type, NTI163227)) {
		F.line = 137;
		log_164054(logger_164034, level_164035, args_164037);
		}
		else {
		if (isObj(logger_164034.m_type, NTI163223)) {
		F.line = 137;
		log_164032(logger_164034, level_164035, args_164037);
		}
		}
	framePtr = F.prev;

	
}
